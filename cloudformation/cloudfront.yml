AWSTemplateFormatVersion: '2010-09-09'
Description: 'tarot base resources'

Parameters:
  AppName:
    Type: String
    Default: tarot
    Description: The name of the application

Resources:

  ###
  ### Lambda URL
  ###

  LambdaFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${AppName}'
      AuthType: NONE


  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AppName
      Action: 'lambda:InvokeFunctionUrl'
      Principal: '*'
      FunctionUrlAuthType: NONE


  ###
  ### Origin Access Control
  ###

  S3CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AppName}-s3-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4


  ###
  ### CloudFront distribution
  ###

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: WebAssetsBucketOrigin
            DomainName:
              Fn::ImportValue: !Sub '${AppName}-WebAssetsBucket-RegionalDomainName'
            OriginAccessControlId: !GetAtt S3CloudFrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ''
          - Id: LambdaOrigin
            DomainName: !Select [2, !Split ['/', !GetAtt LambdaFunctionUrl.FunctionUrl]]
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        DefaultCacheBehavior:
          TargetOriginId: LambdaOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader AWS-managed policy
          Compress: true
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt XForwardedHostFunction.FunctionARN
        CacheBehaviors:
          - PathPattern: assets/*
            TargetOriginId: WebAssetsBucketOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            OriginRequestPolicyId: !Ref AWS::NoValue

  ###
  ### CloudFront Function to add X-Forwarded-Host header.
  ###

  XForwardedHostFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub 'x-forwarded-host-${AWS::Region}'
      AutoPublish: true
      FunctionConfig:
        Comment: 'CloudFront function to add X-Forwarded-Host header.'
        Runtime: cloudfront-js-2.0
      FunctionCode: >
        function handler(event) {
          event.request.headers['x-forwarded-host'] = { value: event.request.headers['host'].value };
          return event.request;
        }